{"version":3,"sources":["services/polls.js","components/PollForm.js","components/PollMaker.js","containers/simplepoll.svg","containers/Main.js","components/Header.js","components/trash.svg","components/PollDirectory.js","components/checked.svg","components/unchecked.svg","components/Checkbox.js","components/Poll.js","components/ResultBar.js","components/PollResults.js","App.js","index.js"],"names":["axios","get","newObject","post","newValue","id","put","delete","PollForm","handleSubmit","handleChange","handleArray","inputObject","onSubmit","name","value","question","onChange","placeholder","Array","from","options","map","option","index","key","e","type","PollMaker","props","addQuestion","event","preventDefault","optionsFiltered","state","filter","counterInit","optionsCheck","Boolean","length","Set","pollObject","answerCount","alert","window","confirm","pollService","then","response","data","setState","handleQuestion","target","handleOptions","array","updateField","update","$set","$push","className","this","Component","_extends","Object","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","stroke","fill","fillRule","_ref","svgRef","title","width","height","viewBox","ref","ForwardRef","forwardRef","Main","style","Header","to","onClick","PollDirectory","polls","onDelete","poll","Checkbox","selectedOption","Poll","updateValue","selectedIndex","saveAnswer","onAnswer","redirect","undefined","method","action","checked","Filler","percentage","ResultBar","PollResults","calcPercentage","count","reduce","pv","cv","Math","round","App","useState","setPolls","useEffect","match","useRouteMatch","find","params","path","currentCount","Number","newCount","p","JSON","stringify","substring","concat","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4bb57e42.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/polls'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (newValue, id) => {\r\n  return axios.put(`${baseUrl}/${id}`, newValue)\r\n}\r\n\r\nconst remove = id => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\nimport '../styles/PollForm.css'\r\n\r\nconst PollForm = ({ handleSubmit, handleChange, handleArray, inputObject }) => {\r\n    \r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div id=\"pollform\">\r\n                <input name=\"question\" id=\"question-field\" value={inputObject.question}\r\n                            onChange={handleChange} placeholder=\"Enter your question\"/>\r\n                {\r\n                    Array.from(inputObject.options).map((option, index) => {\r\n                        return(\r\n                            <div key={index}>\r\n                                <input name=\"options\" id=\"input-field\" value={option} placeholder={`Answer option ${index+1}`}\r\n                                                                onChange={(e) => handleArray(e, index)}/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <button type=\"submit\" id=\"form-button\">Create Poll</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PollForm\r\n","import React, { Component } from 'react';\r\nimport update from 'immutability-helper';\r\nimport PollForm from './PollForm'\r\nimport pollService from '../services/polls'\r\n\r\nclass PollMaker extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            question: '',\r\n            options: ['','']\r\n        }\r\n    }\r\n\r\n    addQuestion = (event) => {\r\n        event.preventDefault()\r\n        const optionsFiltered = this.state.options.filter(option => option !== '')\r\n        const counterInit = optionsFiltered.map(option => option = 0)\r\n        const optionsCheck = Boolean(optionsFiltered.length < 2                                       // Check minimum amount of options\r\n                                    || [...new Set(optionsFiltered)].length < optionsFiltered.length) // Check for duplicates\r\n        const resetState = () => {\r\n            this.setState({\r\n                question: '',\r\n                options: ['','']\r\n            })\r\n        }\r\n        const pollObject = {\r\n            question: this.state.question,\r\n            options: optionsFiltered,\r\n            answerCount: counterInit\r\n        }\r\n        \r\n        switch(this.state.question){\r\n            case '':\r\n                alert(\"Please enter a question\")\r\n                if(optionsCheck){\r\n                    alert(\"Please enter at least two unique answer options\")\r\n                }\r\n                break;\r\n            default:\r\n                if(optionsCheck){\r\n                    alert(\"Please enter at least two unique answer options\")\r\n                } else { \r\n                    if(window.confirm(\"Save this poll?\")){\r\n                        pollService\r\n                            .create(pollObject)\r\n                            .then(response => {\r\n                                this.props.onSubmit(response.data)\r\n                                resetState()\r\n                            })  \r\n                    }   \r\n                }\r\n        }\r\n    }\r\n\r\n    handleQuestion = (event) => {\r\n        this.setState({ question: event.target.value })\r\n    }\r\n\r\n    handleOptions = (event, index) => {\r\n        const updateField  = (array) => {\r\n            return update(array, {[index]: {$set: event.target.value}})\r\n        }\r\n        const newField  = (array) => {\r\n            return update(array, {$push: ['']})\r\n        }\r\n\r\n        this.setState({\r\n            options: updateField(this.state.options)\r\n        })\r\n        if(index === this.state.options.length - 1 && index <= 28){     // Max amount of answer options is set to 30\r\n            this.setState({\r\n                options: updateField(newField(this.state.options))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"poll-maker\">\r\n                <PollForm\r\n                handleSubmit={this.addQuestion}\r\n                handleChange={this.handleQuestion}\r\n                handleArray={this.handleOptions} \r\n                inputObject={this.state}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PollMaker;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"svgg\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"path0\",\n  d: \"M139.908 0.644 C 138.557 1.300,136.850 2.489,136.250 3.193 C 134.621 5.099,134.115 5.852,131.287 10.583 C 130.739 11.500,129.816 13.007,129.236 13.932 C 126.404 18.447,122.153 27.490,116.081 41.917 C 115.464 43.383,114.641 45.333,114.253 46.250 C 111.957 51.680,111.668 55.279,113.029 61.487 C 113.842 65.192,116.001 69.876,117.189 70.512 C 117.827 70.853,120.911 70.913,121.731 70.599 C 123.493 69.927,125.899 65.939,126.392 62.875 C 126.695 60.997,126.943 60.524,128.358 59.131 C 129.549 57.959,129.675 57.648,129.328 56.736 C 128.959 55.765,129.905 53.829,131.776 51.726 C 132.934 50.425,133.000 50.307,133.002 49.550 C 133.010 47.212,135.169 41.458,137.292 38.120 L 137.798 37.323 138.502 38.703 C 145.136 51.713,157.299 51.562,177.056 38.225 C 181.138 35.470,181.155 35.458,181.161 35.234 C 181.173 34.826,181.792 34.500,182.555 34.500 L 183.333 34.500 183.333 35.394 C 183.333 36.011,183.237 36.412,183.024 36.686 C 182.708 37.093,181.272 42.545,180.675 45.604 C 178.439 57.078,179.281 64.137,183.321 67.788 C 184.301 68.673,185.440 68.472,188.130 66.941 C 189.021 66.434,190.176 65.883,190.698 65.718 C 191.505 65.461,191.682 65.330,191.890 64.833 C 192.025 64.512,192.659 63.080,193.299 61.651 C 194.333 59.343,195.991 55.099,196.971 52.250 C 197.985 49.303,198.472 46.342,198.603 42.333 C 198.701 39.353,198.723 39.203,199.257 37.833 C 200.216 35.373,200.397 34.179,200.428 30.083 L 200.456 26.417 201.006 24.917 C 201.628 23.220,201.814 21.269,201.542 19.278 L 201.387 18.140 202.360 18.253 C 203.512 18.387,203.499 18.428,202.849 16.703 C 202.107 14.734,201.971 14.221,202.012 13.542 C 202.045 12.991,201.946 12.812,201.181 12.032 C 200.612 11.451,200.073 10.648,199.615 9.698 C 198.934 8.287,198.881 8.227,197.518 7.329 C 196.144 6.425,195.500 5.666,195.500 4.950 C 195.500 4.264,191.031 2.493,189.349 2.513 C 187.387 2.535,187.236 2.648,185.992 5.018 C 183.882 9.035,181.931 11.190,175.748 16.328 C 174.424 17.428,170.873 20.549,169.127 22.146 C 168.785 22.459,168.094 22.883,167.592 23.087 C 167.090 23.291,165.970 23.917,165.105 24.478 C 161.036 27.113,159.514 27.536,156.985 26.734 C 155.318 26.205,154.925 25.082,155.332 22.008 C 155.525 20.554,155.518 20.321,155.274 19.831 C 154.936 19.153,154.930 18.494,155.252 17.432 C 156.009 14.935,155.265 12.792,151.900 7.791 C 151.236 6.805,150.669 5.925,150.639 5.836 C 150.588 5.688,149.847 5.464,146.917 4.710 C 145.629 4.378,145.392 4.157,145.145 3.052 C 144.911 2.006,144.310 1.389,142.677 0.519 C 141.460 -0.130,141.503 -0.131,139.908 0.644 M243.167 0.518 C 239.690 0.912,236.653 1.978,233.842 3.790 C 233.024 4.318,232.031 4.938,231.636 5.167 C 228.143 7.191,222.736 15.947,222.270 20.332 C 222.060 22.307,219.665 25.441,219.083 24.500 C 218.716 23.906,218.174 24.355,216.720 26.458 C 213.961 30.447,212.833 33.252,212.833 36.125 C 212.833 37.442,212.793 37.657,212.533 37.739 C 211.969 37.919,211.757 38.921,212.150 39.556 C 212.337 39.858,212.599 40.574,212.733 41.147 C 212.866 41.719,213.093 42.368,213.238 42.588 C 213.585 43.119,213.572 43.167,213.083 43.167 C 212.824 43.167,212.667 43.261,212.667 43.417 C 212.667 43.554,212.753 43.667,212.859 43.667 C 213.239 43.667,214.177 44.532,214.539 45.218 C 215.259 46.579,214.997 49.981,213.832 54.417 C 213.442 55.902,213.100 58.252,213.226 58.581 C 213.340 58.879,213.113 58.905,212.634 58.649 C 212.221 58.428,212.317 59.427,212.777 60.142 C 213.014 60.509,213.000 60.565,212.557 61.028 C 211.581 62.047,211.903 63.272,213.958 66.359 C 214.846 67.692,215.064 68.152,215.129 68.832 C 215.193 69.498,215.270 69.667,215.512 69.667 C 215.679 69.667,216.392 69.965,217.097 70.330 L 218.379 70.993 220.398 70.482 C 221.508 70.200,223.204 69.883,224.167 69.777 L 225.917 69.583 226.697 68.283 C 229.196 64.115,230.480 58.315,230.494 51.131 L 230.500 48.346 231.125 48.179 C 231.897 47.973,238.446 46.663,241.524 46.099 C 254.466 43.730,263.342 40.023,268.500 34.832 C 270.873 32.443,271.828 29.551,271.827 24.750 C 271.827 17.865,267.579 7.152,263.822 4.563 C 260.026 1.947,250.691 -0.724,250.246 0.679 C 250.175 0.902,250.046 0.989,249.881 0.926 C 248.625 0.444,245.497 0.254,243.167 0.518 M45.167 0.611 C 39.485 1.008,33.898 2.338,24.203 5.602 C 21.469 6.522,17.093 7.706,15.623 7.922 C 14.688 8.059,14.469 8.300,14.974 8.636 C 15.317 8.863,15.175 8.932,12.635 9.781 C 5.177 12.272,0.667 16.127,0.667 20.010 C 0.667 20.726,0.526 21.679,0.312 22.417 L -0.043 23.639 0.331 24.411 C 0.685 25.142,0.694 25.254,0.502 26.489 C 0.257 28.061,0.309 28.251,1.312 29.466 C 1.743 29.989,2.258 30.648,2.456 30.931 C 2.749 31.348,2.908 31.431,3.301 31.374 C 3.795 31.301,4.500 31.919,4.500 32.423 C 4.500 32.834,8.540 34.107,11.327 34.574 C 12.625 34.791,13.558 34.897,17.833 35.311 C 18.612 35.387,19.904 35.627,20.702 35.846 C 22.073 36.221,22.195 36.229,22.869 35.986 C 23.565 35.736,23.608 35.741,24.544 36.201 C 25.072 36.461,26.535 37.020,27.794 37.444 C 29.053 37.868,30.851 38.541,31.790 38.940 C 32.729 39.340,33.554 39.668,33.623 39.670 C 33.910 39.676,34.833 41.006,34.833 41.412 C 34.833 42.169,34.205 43.120,32.663 44.698 C 31.839 45.541,31.081 46.460,30.978 46.740 C 30.781 47.277,28.987 48.323,23.250 51.244 C 17.291 54.279,13.564 55.345,8.735 55.397 C 4.654 55.441,4.154 56.067,4.536 60.653 C 4.655 62.085,4.642 62.741,4.485 63.303 C 4.283 64.025,4.291 64.064,4.719 64.432 C 5.157 64.809,5.159 64.820,4.873 65.320 C 4.633 65.738,4.619 65.884,4.792 66.161 C 4.906 66.345,5.000 66.643,5.000 66.823 C 5.000 67.003,5.102 67.210,5.226 67.283 C 5.350 67.357,5.589 67.710,5.757 68.067 C 5.925 68.425,6.442 69.119,6.906 69.609 L 7.750 70.500 11.417 70.542 C 15.068 70.583,15.087 70.581,15.958 70.150 C 16.559 69.853,16.833 69.785,16.833 69.932 C 16.833 71.163,27.914 66.795,33.167 63.494 C 40.523 58.872,45.798 52.083,46.112 46.836 C 46.401 41.988,45.952 40.073,43.877 37.308 C 43.156 36.347,42.464 35.303,42.339 34.989 C 42.017 34.177,41.678 33.833,41.201 33.833 C 40.649 33.833,40.346 33.395,40.337 32.583 C 40.304 29.633,37.855 26.551,35.025 25.898 C 34.507 25.779,34.008 25.555,33.917 25.401 C 33.214 24.223,32.359 23.749,29.690 23.055 C 27.474 22.479,26.667 21.992,26.667 21.231 C 26.667 21.023,26.592 20.807,26.500 20.750 C 26.104 20.505,26.345 20.167,26.917 20.167 C 28.555 20.167,31.225 19.492,32.167 18.840 C 32.434 18.654,32.935 18.544,33.567 18.530 C 34.123 18.518,35.427 18.261,36.567 17.938 C 40.623 16.788,41.659 16.720,42.922 17.521 L 43.743 18.041 45.663 17.856 C 50.481 17.391,52.196 17.294,53.990 17.383 C 55.648 17.465,58.329 17.831,59.178 18.090 C 59.459 18.176,61.697 16.885,63.125 15.813 L 64.000 15.156 64.000 13.988 C 64.000 12.625,63.728 11.981,62.629 10.741 C 62.209 10.267,61.806 9.598,61.682 9.167 C 61.563 8.754,60.749 7.334,59.874 6.010 C 58.999 4.686,58.126 3.243,57.933 2.803 C 57.531 1.883,57.552 1.893,54.417 1.253 C 51.274 0.612,48.201 0.399,45.167 0.611 M292.127 0.666 C 291.128 0.967,290.513 1.498,290.327 2.220 C 288.998 7.375,287.903 10.691,283.548 22.750 C 282.489 25.683,281.116 29.508,280.498 31.250 C 279.879 32.992,279.084 35.054,278.731 35.833 C 278.234 36.929,278.081 37.483,278.058 38.280 C 278.036 39.041,277.918 39.498,277.608 40.030 C 276.870 41.293,275.386 46.709,274.911 49.874 C 274.164 54.843,275.089 59.953,277.332 63.250 C 277.581 63.617,277.873 64.186,277.980 64.515 C 278.087 64.844,278.366 65.369,278.601 65.681 C 278.835 65.994,279.216 66.619,279.447 67.071 C 279.961 68.071,280.237 68.311,281.833 69.140 C 286.281 71.450,291.803 71.144,301.417 68.054 C 303.680 67.326,305.279 67.000,306.583 67.000 C 307.133 67.000,308.783 66.845,310.250 66.655 C 314.953 66.046,319.128 66.190,321.566 67.044 C 322.117 67.237,322.345 67.236,323.066 67.039 C 323.534 66.910,324.817 66.764,325.917 66.712 L 327.917 66.619 328.649 65.975 C 329.291 65.412,330.618 64.833,331.269 64.833 C 331.408 64.833,331.472 64.571,331.463 64.042 C 331.456 63.606,331.507 62.936,331.578 62.553 C 331.684 61.984,331.642 61.750,331.354 61.283 C 331.158 60.966,330.887 60.051,330.748 59.230 C 330.085 55.344,330.337 55.565,323.744 53.103 C 322.599 52.675,322.177 52.425,320.924 51.430 C 320.421 51.031,320.097 50.926,319.114 50.842 C 318.445 50.785,317.733 50.619,317.500 50.466 C 317.135 50.227,316.794 50.211,314.750 50.338 C 313.467 50.418,311.477 50.487,310.330 50.492 C 304.716 50.514,300.397 51.132,297.305 52.354 C 296.070 52.843,295.985 52.854,294.805 52.676 C 293.949 52.547,293.314 52.543,292.686 52.662 C 292.192 52.756,291.758 52.833,291.723 52.833 C 291.598 52.833,291.860 50.571,292.182 48.876 C 292.607 46.642,293.499 43.998,295.453 39.181 C 296.959 35.468,297.828 32.781,297.832 31.825 C 297.833 31.590,298.045 31.103,298.304 30.741 C 298.752 30.115,299.500 28.477,299.500 28.122 C 299.500 28.031,299.665 27.689,299.866 27.363 C 300.068 27.037,300.431 26.016,300.674 25.093 C 301.130 23.362,301.597 22.122,303.032 18.833 C 303.492 17.779,304.189 15.964,304.580 14.799 C 304.982 13.604,305.478 12.460,305.719 12.173 C 307.542 10.006,304.295 3.603,301.191 3.244 C 299.359 3.033,296.903 2.290,294.299 1.161 C 293.461 0.797,292.733 0.506,292.680 0.514 C 292.627 0.522,292.378 0.590,292.127 0.666 M101.000 0.720 C 100.926 0.795,93.738 1.120,85.265 1.433 C 82.622 1.530,82.182 1.588,81.422 1.936 C 80.459 2.377,78.452 2.687,74.000 3.084 C 69.770 3.460,69.500 3.535,69.500 4.326 C 69.500 5.121,69.112 6.069,68.656 6.389 L 68.307 6.633 68.778 7.346 C 69.220 8.014,69.251 8.176,69.274 9.916 C 69.293 11.383,69.368 11.928,69.632 12.511 C 69.816 12.918,70.156 13.717,70.387 14.287 C 71.641 17.386,74.513 19.077,76.859 18.097 C 78.033 17.606,84.361 16.302,84.562 16.509 C 84.887 16.843,83.653 21.929,82.256 26.017 C 81.767 27.447,81.285 29.141,81.186 29.783 C 80.871 31.814,80.075 34.000,78.163 38.083 C 77.363 39.792,76.264 42.645,76.086 43.477 C 75.960 44.060,75.646 44.812,74.510 47.249 C 74.138 48.047,73.833 48.724,73.833 48.755 C 73.833 48.785,73.339 49.846,72.735 51.113 C 72.131 52.380,71.491 53.724,71.312 54.100 L 70.987 54.783 69.118 54.889 C 68.091 54.947,65.675 55.259,63.750 55.582 C 61.825 55.904,59.430 56.241,58.427 56.330 L 56.604 56.492 55.893 57.190 C 54.923 58.142,54.753 58.948,55.162 60.656 C 55.328 61.350,55.630 62.629,55.833 63.500 C 56.565 66.642,57.780 69.069,59.177 70.175 C 60.100 70.906,62.618 70.707,67.561 69.512 C 69.689 68.998,73.617 68.139,75.167 67.850 C 78.325 67.260,81.564 67.291,83.814 67.933 C 84.776 68.207,84.941 68.149,85.028 67.502 C 85.101 66.954,89.524 66.443,93.174 66.560 L 95.431 66.633 96.162 65.903 C 96.878 65.188,97.834 64.711,98.154 64.909 C 98.243 64.964,98.626 64.550,99.006 63.991 C 101.133 60.860,101.163 58.760,99.097 57.749 C 98.428 57.422,98.161 57.175,97.945 56.685 C 97.698 56.126,97.480 55.962,96.200 55.367 C 94.687 54.664,94.287 54.349,94.092 53.708 C 93.979 53.337,93.946 53.333,90.905 53.333 C 87.516 53.333,87.634 53.383,88.231 52.203 C 88.450 51.770,89.196 49.980,89.890 48.225 C 90.584 46.469,91.492 44.234,91.909 43.259 C 92.326 42.283,92.667 41.245,92.668 40.951 C 92.670 40.193,93.318 37.726,94.778 32.917 C 95.473 30.625,96.211 28.150,96.417 27.417 C 96.624 26.683,96.986 25.446,97.223 24.667 C 98.164 21.573,99.333 16.708,99.333 15.887 C 99.333 15.606,99.428 15.500,99.681 15.500 C 103.337 15.500,110.595 14.817,113.117 14.236 C 115.738 13.632,118.683 12.500,119.176 11.906 C 119.271 11.790,119.357 10.866,119.366 9.852 C 119.389 7.348,118.795 6.451,116.863 6.064 C 116.466 5.985,116.310 5.820,116.091 5.246 C 115.101 2.654,112.680 1.611,107.000 1.326 C 105.212 1.237,103.412 1.088,103.000 0.995 C 101.812 0.728,101.090 0.629,101.000 0.720 M393.108 1.579 C 393.028 1.787,392.889 1.841,392.623 1.768 C 391.382 1.423,391.454 1.409,391.578 1.977 C 391.713 2.590,391.495 2.661,391.000 2.167 C 390.817 1.983,390.485 1.833,390.264 1.833 C 390.042 1.833,389.836 1.762,389.806 1.675 C 389.773 1.583,388.783 1.681,387.414 1.914 C 386.129 2.132,383.504 2.506,381.580 2.745 C 372.387 3.889,368.137 4.700,361.938 6.494 C 360.368 6.948,357.752 7.588,356.125 7.915 C 350.317 9.083,347.440 10.416,345.407 12.880 L 344.732 13.698 345.114 15.391 C 345.324 16.322,345.497 17.314,345.498 17.596 C 345.509 20.473,347.056 25.099,348.572 26.786 L 349.340 27.640 348.941 28.695 C 348.722 29.275,347.720 31.400,346.716 33.417 C 345.231 36.398,343.818 39.647,343.106 41.719 C 343.049 41.885,342.931 41.977,342.844 41.923 C 342.491 41.705,341.540 42.942,341.531 43.631 C 341.521 44.306,341.193 45.096,340.127 47.000 C 338.944 49.116,338.900 51.447,339.931 57.465 C 340.257 59.363,340.597 61.366,340.688 61.915 C 340.827 62.752,340.946 62.989,341.433 63.390 C 341.764 63.663,342.212 64.307,342.478 64.892 C 344.328 68.966,353.307 71.278,362.417 70.024 C 364.881 69.685,366.166 69.496,367.801 69.232 C 369.078 69.026,369.564 69.017,370.551 69.181 C 371.604 69.356,372.003 69.338,373.833 69.027 C 374.979 68.833,377.117 68.483,378.583 68.249 C 387.288 66.862,391.198 64.587,394.222 59.151 C 394.947 57.846,394.949 57.833,394.421 57.833 C 393.892 57.833,393.599 57.374,393.248 56.000 C 392.937 54.781,392.626 54.332,392.173 54.450 C 392.004 54.494,391.596 54.403,391.268 54.247 C 390.696 53.976,390.454 53.723,388.801 51.667 C 387.972 50.637,386.917 49.944,386.508 50.162 C 386.218 50.318,383.225 50.966,380.382 51.490 C 379.355 51.679,378.005 52.032,377.382 52.275 C 376.386 52.663,375.909 52.731,373.417 52.840 C 371.858 52.908,368.971 53.155,367.000 53.389 C 361.463 54.045,355.363 54.086,354.747 53.470 C 354.398 53.120,358.480 45.363,359.982 43.522 C 360.377 43.038,360.464 43.004,360.917 43.155 C 361.412 43.320,365.287 43.718,366.250 43.703 C 366.525 43.698,367.650 43.649,368.750 43.593 C 371.078 43.475,371.163 43.475,372.908 43.600 C 376.747 43.876,380.345 42.536,386.035 38.711 L 389.154 36.615 389.265 35.878 C 389.528 34.121,388.957 32.500,388.074 32.500 C 386.580 32.500,381.830 28.193,382.212 27.183 C 382.316 26.906,382.360 26.638,382.309 26.587 C 382.219 26.496,377.147 26.801,372.430 27.180 C 369.657 27.403,364.766 27.333,364.500 27.066 C 364.399 26.965,364.257 26.215,364.185 25.400 C 364.114 24.584,364.024 23.816,363.986 23.692 C 363.939 23.539,364.211 23.391,364.833 23.229 C 365.337 23.098,366.162 22.791,366.666 22.547 C 367.249 22.264,367.800 22.118,368.180 22.145 C 368.508 22.169,369.401 22.029,370.163 21.834 C 371.002 21.620,371.950 21.496,372.566 21.520 C 373.483 21.556,373.713 21.490,374.892 20.854 C 377.121 19.653,380.127 18.801,384.917 18.012 C 389.145 17.316,390.071 17.135,391.429 16.742 C 395.718 15.499,400.278 11.722,399.839 9.776 C 399.764 9.441,399.767 8.885,399.847 8.542 C 400.212 6.968,400.096 6.616,399.042 6.104 C 396.646 4.941,394.765 3.452,393.564 1.768 C 393.265 1.350,393.206 1.325,393.108 1.579 M251.369 19.404 C 253.531 19.941,255.178 20.602,256.437 21.437 L 257.378 22.062 256.897 22.458 C 255.739 23.410,253.911 24.156,249.500 25.476 C 248.262 25.846,246.743 26.379,246.123 26.661 C 244.737 27.289,243.665 27.574,241.083 28.001 C 239.168 28.317,237.524 28.732,236.385 29.187 C 235.891 29.384,235.821 29.367,235.404 28.949 C 235.157 28.702,234.892 28.500,234.816 28.500 C 234.289 28.500,234.349 27.795,234.984 26.532 C 235.346 25.812,235.883 24.481,236.178 23.575 C 236.758 21.789,236.846 21.681,238.562 20.618 C 241.424 18.846,246.996 18.318,251.369 19.404 M107.744 88.186 C 107.648 88.489,107.548 88.523,107.024 88.429 C 104.708 88.012,104.065 87.965,102.000 88.060 C 97.950 88.245,93.580 89.623,91.197 91.464 C 90.859 91.725,90.208 92.152,89.750 92.413 C 85.551 94.805,80.737 102.220,79.754 107.813 C 79.356 110.076,77.158 113.096,76.584 112.167 C 75.929 111.107,72.219 116.253,70.876 120.083 C 70.563 120.977,70.447 121.721,70.379 123.261 C 70.299 125.090,70.259 125.287,69.945 125.428 C 69.403 125.672,69.250 126.575,69.643 127.218 C 69.821 127.511,70.090 128.236,70.240 128.831 C 70.390 129.426,70.625 130.082,70.760 130.289 C 70.988 130.637,70.982 130.667,70.680 130.667 C 70.217 130.667,70.047 131.027,70.410 131.240 C 72.807 132.646,72.984 135.025,71.232 142.250 C 71.010 143.167,70.781 144.460,70.723 145.125 C 70.619 146.324,70.458 146.558,70.033 146.133 C 69.702 145.802,69.787 146.838,70.149 147.549 L 70.465 148.169 69.983 148.685 C 69.065 149.668,69.368 150.808,71.362 153.866 C 72.316 155.329,72.566 155.848,72.628 156.493 C 72.702 157.254,72.734 157.301,73.264 157.387 C 73.570 157.436,74.258 157.733,74.792 158.046 L 75.762 158.614 78.006 158.051 C 79.242 157.740,80.929 157.442,81.761 157.387 L 83.272 157.287 83.878 156.351 C 86.419 152.426,87.723 147.058,87.942 139.625 C 88.003 137.540,88.089 135.833,88.132 135.833 C 88.175 135.833,90.057 135.460,92.314 135.004 C 94.570 134.548,97.841 133.906,99.582 133.578 C 112.535 131.138,120.824 127.616,126.005 122.352 L 127.759 120.569 128.284 118.826 C 130.534 111.347,128.777 102.681,123.296 94.225 C 121.404 91.306,116.845 89.260,109.428 88.001 C 108.046 87.767,107.871 87.786,107.744 88.186 M224.084 88.512 C 223.100 89.003,223.069 89.058,222.412 91.490 C 221.306 95.582,218.715 103.370,216.670 108.750 C 216.272 109.797,215.019 113.275,214.328 115.250 C 212.564 120.289,212.128 121.460,211.168 123.729 C 210.621 125.024,210.484 125.539,210.524 126.146 C 210.564 126.741,210.476 127.088,210.137 127.667 C 209.312 129.074,207.779 134.853,207.338 138.220 C 206.732 142.836,207.807 148.099,209.929 150.917 C 210.136 151.192,210.451 151.802,210.629 152.272 C 210.807 152.742,211.143 153.380,211.374 153.689 C 211.606 153.997,211.948 154.555,212.136 154.928 C 212.903 156.457,215.948 157.783,219.591 158.175 C 223.262 158.570,227.254 157.826,235.250 155.257 C 236.261 154.932,237.328 154.767,239.661 154.577 C 241.353 154.438,243.266 154.238,243.911 154.132 C 246.113 153.770,251.201 153.878,252.833 154.322 C 254.458 154.763,254.869 154.788,256.250 154.525 C 256.800 154.421,257.887 154.334,258.667 154.332 C 260.151 154.328,260.315 154.273,261.491 153.383 C 261.878 153.089,262.598 152.732,263.090 152.589 L 263.984 152.329 263.981 151.623 C 263.979 151.234,264.028 150.589,264.091 150.188 C 264.181 149.617,264.133 149.330,263.868 148.855 C 263.676 148.512,263.376 147.347,263.176 146.167 C 262.981 145.021,262.787 143.968,262.744 143.827 C 262.609 143.378,261.005 142.552,257.933 141.346 C 255.605 140.432,254.709 139.991,253.858 139.337 C 252.826 138.545,252.714 138.500,251.759 138.499 C 251.042 138.499,250.591 138.402,250.199 138.163 C 249.663 137.836,249.522 137.831,245.032 137.996 C 235.619 138.341,233.030 138.671,229.904 139.928 C 228.588 140.457,228.531 140.465,227.296 140.287 C 226.443 140.164,225.742 140.158,225.139 140.267 L 224.245 140.429 224.362 138.961 C 224.630 135.607,225.515 132.727,228.508 125.468 C 229.704 122.569,230.053 121.480,230.322 119.821 C 230.411 119.269,230.672 118.591,230.964 118.154 C 231.235 117.748,231.627 116.929,231.834 116.333 C 232.042 115.737,232.341 115.063,232.498 114.833 C 232.656 114.604,232.919 113.854,233.083 113.167 C 233.487 111.468,233.987 110.098,235.454 106.667 C 236.623 103.933,237.667 101.068,237.667 100.594 C 237.667 100.479,237.824 100.242,238.017 100.068 C 239.593 98.641,238.609 94.599,236.119 92.275 C 234.724 90.974,234.572 90.888,233.454 90.784 C 231.768 90.626,228.769 89.690,226.595 88.643 C 225.437 88.085,224.988 88.061,224.084 88.512 M288.429 88.629 L 287.608 89.083 287.053 91.250 C 286.451 93.599,285.520 96.642,284.476 99.667 C 283.737 101.807,281.449 108.219,281.056 109.250 C 280.916 109.617,280.429 110.967,279.972 112.250 C 279.516 113.533,278.927 115.183,278.664 115.917 C 278.401 116.650,277.883 118.137,277.512 119.220 C 277.141 120.304,276.449 122.067,275.973 123.137 C 275.281 124.695,275.101 125.283,275.075 126.083 C 275.051 126.803,274.923 127.293,274.618 127.833 C 274.177 128.612,273.515 130.770,272.752 133.917 C 271.051 140.930,271.637 146.732,274.466 150.873 C 274.733 151.263,275.039 151.852,275.147 152.181 C 275.254 152.510,275.533 153.035,275.767 153.348 C 276.001 153.661,276.376 154.274,276.600 154.710 C 277.837 157.119,282.714 158.636,287.752 158.178 C 290.975 157.885,292.651 157.493,298.562 155.652 C 301.008 154.890,301.436 154.809,304.229 154.580 C 305.891 154.443,307.813 154.242,308.500 154.134 C 311.007 153.738,315.680 153.863,317.670 154.378 C 319.119 154.753,319.525 154.801,320.004 154.656 C 320.322 154.559,321.569 154.425,322.773 154.359 L 324.962 154.238 325.710 153.625 C 326.529 152.954,326.904 152.765,327.930 152.507 C 328.560 152.348,328.604 152.300,328.537 151.841 C 328.497 151.568,328.554 150.970,328.664 150.511 C 328.850 149.738,328.833 149.614,328.438 148.797 C 328.174 148.251,327.880 147.126,327.665 145.833 C 327.474 144.688,327.228 143.662,327.117 143.553 C 326.676 143.121,324.291 141.988,322.083 141.162 C 319.719 140.276,319.270 140.039,318.095 139.051 C 317.506 138.556,317.334 138.500,316.396 138.500 C 315.651 138.500,315.190 138.404,314.786 138.166 C 314.237 137.842,314.080 137.837,309.568 137.996 C 300.253 138.326,297.394 138.702,294.239 140.015 C 293.130 140.477,292.998 140.496,292.164 140.317 C 291.625 140.202,290.783 140.171,290.033 140.239 L 288.793 140.351 288.911 139.050 C 289.215 135.728,290.061 132.926,292.750 126.333 C 294.233 122.696,294.736 121.152,294.940 119.608 C 295.013 119.051,295.214 118.545,295.511 118.167 C 295.762 117.846,296.165 117.030,296.405 116.353 C 296.646 115.676,296.976 114.926,297.140 114.686 C 297.304 114.446,297.573 113.650,297.739 112.917 C 298.058 111.503,298.614 110.012,300.379 105.833 C 300.980 104.412,301.675 102.575,301.924 101.750 C 302.208 100.806,302.554 100.047,302.855 99.703 C 304.757 97.527,301.265 91.076,298.022 90.775 C 296.492 90.633,294.335 89.995,291.987 88.991 C 289.760 88.039,289.536 88.016,288.429 88.629 M107.750 106.756 C 110.232 107.230,113.107 108.359,114.333 109.341 L 114.750 109.674 114.174 110.170 C 113.118 111.078,111.127 111.871,106.663 113.162 C 105.790 113.415,104.524 113.863,103.850 114.159 C 102.225 114.873,101.423 115.100,99.154 115.489 C 96.333 115.974,95.523 116.165,94.401 116.611 L 93.385 117.015 92.841 116.507 C 92.543 116.228,92.239 116.000,92.167 116.000 C 91.785 116.000,91.893 115.326,92.470 114.106 C 92.823 113.360,93.356 112.016,93.655 111.118 C 94.903 107.373,101.041 105.473,107.750 106.756 \",\n  stroke: \"none\",\n  fill: \"#fcfcfc\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  id: \"path1\",\n  d: \"M163.333 91.435 C 137.888 94.838,124.666 123.812,138.860 145.065 C 155.573 170.089,194.627 163.713,202.086 134.742 C 208.262 110.755,188.019 88.133,163.333 91.435 M160.096 105.774 C 163.138 107.767,161.333 117.833,157.933 117.833 C 154.369 117.833,154.594 107.490,158.197 105.686 C 158.957 105.305,159.414 105.326,160.096 105.774 M182.014 108.597 C 184.309 110.796,183.476 118.482,180.761 120.160 C 179.036 121.226,177.554 119.808,177.162 116.715 C 176.514 111.599,179.657 106.339,182.014 108.597 M149.842 128.588 C 150.546 128.952,150.261 129.565,148.687 131.075 C 147.819 131.908,147.812 131.838,148.990 134.235 C 154.094 144.618,167.169 149.065,177.950 144.084 C 180.985 142.682,185.698 138.782,186.734 136.814 L 187.051 136.212 186.622 135.648 C 186.174 135.058,185.449 133.677,185.261 133.053 C 185.164 132.732,185.233 132.673,185.855 132.550 L 186.558 132.411 187.188 133.670 C 187.931 135.154,189.415 136.774,191.000 137.830 C 191.596 138.227,192.105 138.568,192.132 138.588 C 192.218 138.653,191.471 139.833,191.345 139.833 C 191.151 139.833,189.304 138.518,188.728 137.969 C 188.210 137.476,188.203 137.475,187.966 137.814 C 183.361 144.388,175.522 148.667,168.083 148.667 C 159.276 148.667,152.121 143.800,147.282 134.519 C 146.823 133.638,146.429 132.893,146.407 132.864 C 146.385 132.835,145.967 133.013,145.479 133.261 C 144.653 133.679,142.935 134.333,142.661 134.333 C 142.596 134.333,142.500 134.127,142.449 133.875 C 142.398 133.623,142.310 133.296,142.253 133.148 C 142.174 132.944,142.281 132.852,142.699 132.769 C 144.176 132.474,146.386 131.153,147.750 129.749 C 149.254 128.201,149.177 128.244,149.842 128.588 \",\n  stroke: \"none\",\n  fill: \"#fbcb3b\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  id: \"path2\",\n  d: \"M165.417 90.192 C 151.009 91.021,137.773 101.419,133.609 115.179 C 126.459 138.812,143.378 161.242,169.013 162.113 C 194.400 162.976,212.570 138.489,204.312 114.542 C 198.937 98.953,183.300 89.164,165.417 90.192 M172.833 91.437 C 195.746 94.387,209.632 118.794,200.369 139.833 C 189.207 165.188,154.052 168.137,138.785 145.000 C 122.308 120.030,142.931 87.587,172.833 91.437 M157.669 106.101 C 155.173 108.356,154.576 114.989,156.672 117.192 C 158.490 119.103,160.878 116.536,161.502 112.000 C 162.133 107.418,159.942 104.047,157.669 106.101 M180.374 108.142 C 176.608 109.227,175.963 120.500,179.667 120.500 C 182.642 120.500,184.579 112.422,182.398 109.112 C 182.068 108.610,181.063 107.923,180.797 108.017 C 180.771 108.026,180.581 108.082,180.374 108.142 M148.667 128.948 C 147.751 130.294,144.487 132.446,142.875 132.767 C 142.291 132.883,142.205 133.141,142.495 133.904 L 142.657 134.330 143.870 133.897 C 144.537 133.659,145.364 133.309,145.706 133.119 C 146.049 132.929,146.355 132.806,146.386 132.845 C 146.418 132.885,146.804 133.592,147.245 134.417 C 156.464 151.674,174.655 153.671,187.112 138.794 L 188.191 137.505 189.183 138.308 C 189.729 138.749,190.470 139.276,190.830 139.478 L 191.485 139.846 191.801 139.231 L 192.117 138.615 190.902 137.802 C 189.314 136.740,187.801 135.075,187.122 133.642 L 186.583 132.507 185.917 132.606 C 185.550 132.660,185.228 132.724,185.201 132.748 C 185.088 132.849,186.048 134.777,186.581 135.518 L 187.159 136.323 186.152 137.660 C 176.310 150.720,154.970 148.190,148.431 133.187 L 147.822 131.792 148.482 131.227 C 149.130 130.672,150.433 129.037,150.312 128.930 C 150.226 128.854,149.194 128.333,149.133 128.334 C 149.106 128.335,148.896 128.611,148.667 128.948 \",\n  stroke: \"none\",\n  fill: \"#050504\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  id: \"path3\",\n  d: \"M177.042 115.417 C 177.044 115.783,177.078 115.914,177.118 115.706 C 177.158 115.499,177.156 115.199,177.115 115.040 C 177.073 114.880,177.040 115.050,177.042 115.417 M203.228 126.000 C 203.228 126.962,203.256 127.356,203.290 126.875 C 203.323 126.394,203.323 125.606,203.290 125.125 C 203.256 124.644,203.228 125.037,203.228 126.000 M147.824 129.792 L 147.250 130.417 147.875 129.842 C 148.457 129.308,148.577 129.167,148.449 129.167 C 148.422 129.167,148.140 129.448,147.824 129.792 M184.494 139.458 L 183.583 140.417 184.542 139.506 C 185.432 138.659,185.576 138.500,185.453 138.500 C 185.427 138.500,184.995 138.931,184.494 139.458 M184.744 141.375 L 183.917 142.250 184.792 141.423 C 185.273 140.968,185.667 140.574,185.667 140.548 C 185.667 140.424,185.512 140.562,184.744 141.375 M167.375 160.790 C 167.902 160.823,168.765 160.823,169.292 160.790 C 169.819 160.757,169.387 160.730,168.333 160.730 C 167.279 160.730,166.848 160.757,167.375 160.790 \",\n  stroke: \"none\",\n  fill: \"#886b21\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  id: \"path4\",\n  d: \"\",\n  stroke: \"none\",\n  fill: \"#100bcbc\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgSimplepoll = function SvgSimplepoll(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    width: 400,\n    height: 162.25032502068314,\n    viewBox: \"0, 0, 400,162.25032502068314\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgSimplepoll, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/simplepoll.2f4cf76a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { Component } from 'react'\r\nimport PollMaker from '../components/PollMaker'\r\nimport '../styles/Main.css'\r\nimport { ReactComponent as SimpleLogo } from './simplepoll.svg'\r\n\r\nclass Main extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <div id=\"logo\">\r\n                    <SimpleLogo style={{width: '40vw'}} />\r\n                    <p id=\"logo-txt\">Polls made quick and easy.</p>\r\n                </div>\r\n                <div id=\"pollmaker-container\">\r\n                    <div id=\"pollmaker-background\">\r\n                        <div id=\"pollmaker\">\r\n                            <PollMaker onSubmit={this.props.onSubmit}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/Header.css'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div className=\"Header\">\r\n            <div id=\"header\">\r\n                <div id=\"header-buttons\">\r\n                    <Link to={'/polls'}>\r\n                        <button id=\"header-button\" type=\"button\" onClick={void(0)}>Polls</button>\r\n                    </Link>\r\n                    <Link to={'/'}>\r\n                        <button id=\"header-button\" type=\"button\" onClick={void(0)}>Create A Poll</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M 21 2 C 19.354545 2 18 3.3545455 18 5 L 18 7 L 10.154297 7 A 1.0001 1.0001 0 0 0 9.984375 6.9863281 A 1.0001 1.0001 0 0 0 9.8398438 7 L 8 7 A 1.0001 1.0001 0 1 0 8 9 L 9 9 L 9 45 C 9 46.645455 10.354545 48 12 48 L 38 48 C 39.645455 48 41 46.645455 41 45 L 41 9 L 42 9 A 1.0001 1.0001 0 1 0 42 7 L 40.167969 7 A 1.0001 1.0001 0 0 0 39.841797 7 L 32 7 L 32 5 C 32 3.3545455 30.645455 2 29 2 L 21 2 z M 21 4 L 29 4 C 29.554545 4 30 4.4454545 30 5 L 30 7 L 20 7 L 20 5 C 20 4.4454545 20.445455 4 21 4 z M 11 9 L 18.832031 9 A 1.0001 1.0001 0 0 0 19.158203 9 L 30.832031 9 A 1.0001 1.0001 0 0 0 31.158203 9 L 39 9 L 39 45 C 39 45.554545 38.554545 46 38 46 L 12 46 C 11.445455 46 11 45.554545 11 45 L 11 9 z M 18.984375 13.986328 A 1.0001 1.0001 0 0 0 18 15 L 18 40 A 1.0001 1.0001 0 1 0 20 40 L 20 15 A 1.0001 1.0001 0 0 0 18.984375 13.986328 z M 24.984375 13.986328 A 1.0001 1.0001 0 0 0 24 15 L 24 40 A 1.0001 1.0001 0 1 0 26 40 L 26 15 A 1.0001 1.0001 0 0 0 24.984375 13.986328 z M 30.984375 13.986328 A 1.0001 1.0001 0 0 0 30 15 L 30 40 A 1.0001 1.0001 0 1 0 32 40 L 32 15 A 1.0001 1.0001 0 0 0 30.984375 13.986328 z\"\n});\n\nvar SvgTrash = function SvgTrash(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTrash, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/trash.2ea4cb69.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/PollDirectory.css'\r\nimport { ReactComponent as Trash } from './trash.svg'\r\n\r\nconst PollDirectory = ({ polls, onDelete }) => {\r\n    if (polls.length > 0) {\r\n        return(\r\n        <div className=\"poll-directory\">\r\n            <div id=\"poll-dir-table\">\r\n                <h2 id=\"dir-header\">Open polls:</h2>\r\n                <table id=\"dir-table\">\r\n                    <tbody>\r\n                        {polls.map(poll =>\r\n                            <tr key={poll.id + ''}>\r\n                                <td><Link to={`/polls/${poll.id}`}>{poll.question}</Link></td>\r\n                                <td>\r\n                                    <button className=\"del-button\" onClick={onDelete} id={poll.id}>\r\n                                        <Trash style={{width: '1.5rem', height: '2rem'}}/>\r\n                                    </button>\r\n                                </td>\r\n                        </tr>)\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        )\r\n    } else return (\r\n    <div className=\"poll-directory\">\r\n        <div id=\"poll-dir-table\">\r\n            <h2 id=\"dir-header\">Open polls:</h2>\r\n            <p id=\"no-polls\">No polls yet!</p>\r\n        </div>\r\n    </div>)   \r\n}\r\n\r\nexport default PollDirectory\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"svgg\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"path0\",\n  d: \"M339.200 95.022 C 336.450 95.976,333.957 96.767,333.660 96.778 C 333.364 96.790,332.554 97.055,331.860 97.367 C 331.167 97.678,327.100 99.318,322.822 101.011 C 318.544 102.704,312.964 105.083,310.422 106.299 C 298.592 111.955,298.846 111.827,290.400 116.474 C 288.970 117.261,286.954 118.421,285.920 119.052 C 284.886 119.684,282.726 120.999,281.120 121.975 C 270.977 128.142,258.022 137.472,250.261 144.200 C 250.007 144.420,249.080 145.214,248.200 145.965 C 241.777 151.445,230.424 162.539,225.240 168.401 C 220.017 174.306,219.934 174.404,217.189 177.864 C 211.888 184.546,210.736 186.063,208.662 189.095 C 207.494 190.803,205.798 193.280,204.894 194.600 C 202.234 198.480,196.400 208.116,196.400 208.630 C 196.400 208.889,196.156 209.305,195.858 209.552 C 195.305 210.011,194.763 209.232,180.601 187.600 C 176.602 181.492,174.140 177.770,173.061 176.200 C 172.758 175.760,170.218 171.890,167.415 167.600 C 156.679 151.166,157.932 152.342,156.029 156.910 C 155.276 158.720,153.521 162.595,152.129 165.522 C 150.738 168.449,149.600 170.942,149.600 171.061 C 149.600 171.181,149.343 171.846,149.029 172.540 C 148.029 174.746,145.565 180.105,144.219 183.000 C 143.503 184.540,141.971 187.905,140.814 190.478 L 138.710 195.156 141.255 198.056 C 142.655 199.650,145.060 202.328,146.600 204.006 C 148.140 205.684,151.380 209.279,153.800 211.995 C 156.220 214.711,159.042 217.849,160.070 218.967 C 161.099 220.085,162.328 221.450,162.801 222.000 C 163.779 223.136,166.298 225.946,174.245 234.767 C 177.300 238.158,180.587 241.848,181.549 242.967 C 182.511 244.085,184.401 246.182,185.749 247.626 C 187.097 249.070,189.550 251.767,191.200 253.618 C 196.681 259.768,196.732 259.818,197.121 259.400 C 197.480 259.015,199.204 255.836,203.194 248.200 C 204.229 246.220,206.694 241.720,208.672 238.200 C 210.649 234.680,212.870 230.720,213.607 229.400 C 214.344 228.080,215.454 226.248,216.073 225.328 C 216.693 224.408,217.200 223.543,217.200 223.405 C 217.200 222.598,231.263 200.716,236.098 194.000 C 244.523 182.296,251.175 174.013,261.153 162.800 C 273.783 148.606,294.347 130.189,313.840 115.614 C 324.996 107.272,337.756 98.197,341.400 96.011 C 346.505 92.951,345.924 92.690,339.200 95.022 M128.600 102.276 C 113.242 104.273,101.304 114.791,97.133 130.000 L 96.200 133.400 96.200 207.000 L 96.200 280.600 97.124 284.000 C 100.768 297.402,111.028 307.502,124.400 310.849 L 128.200 311.800 201.000 311.800 L 273.800 311.800 277.600 310.849 C 291.238 307.434,301.711 296.932,304.921 283.453 L 305.790 279.800 305.905 209.205 C 306.013 142.378,305.887 132.527,304.909 131.549 C 304.527 131.167,302.994 132.333,295.700 138.551 L 292.003 141.703 292.002 209.828 C 292.002 255.443,291.864 278.655,291.585 280.077 C 290.022 288.037,282.193 295.829,274.000 297.577 C 272.350 297.929,253.752 298.016,199.600 297.923 L 127.400 297.800 124.974 296.758 C 117.555 293.572,111.876 287.116,110.408 280.200 C 110.115 278.821,110.017 255.671,110.092 205.600 L 110.200 133.000 111.200 130.687 C 114.357 123.383,120.676 117.869,127.525 116.441 C 130.602 115.799,271.097 115.814,274.583 116.456 L 277.080 116.916 280.040 115.000 C 281.668 113.947,284.674 112.190,286.720 111.096 C 291.159 108.723,291.159 108.724,285.498 105.863 C 281.965 104.078,279.073 103.220,273.800 102.393 C 271.528 102.036,131.310 101.923,128.600 102.276 \",\n  stroke: \"none\",\n  fill: \"#000000\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgChecked = function SvgChecked(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    width: 400,\n    height: 400,\n    viewBox: \"0, 0, 400,400\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgChecked, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/checked.bfebca10.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"svgg\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"path0\",\n  d: \"M128.400 102.265 C 127.091 102.401,126.172 102.593,121.600 103.686 C 111.673 106.059,101.556 116.224,97.400 128.000 L 96.200 131.400 96.200 206.800 L 96.200 282.200 97.347 285.600 C 100.164 293.954,106.575 302.394,112.728 305.851 C 113.758 306.429,115.050 307.206,115.600 307.577 C 117.051 308.557,121.342 310.174,124.800 311.045 C 127.686 311.771,130.572 311.800,201.000 311.800 L 274.200 311.800 277.600 310.843 C 292.240 306.720,303.257 294.789,305.178 280.976 C 305.867 276.023,305.728 135.873,305.030 131.962 C 302.724 119.036,291.282 106.271,279.600 103.594 C 278.390 103.316,276.770 102.893,276.000 102.652 C 274.693 102.244,132.199 101.870,128.400 102.265 M274.174 116.422 C 281.895 117.877,288.811 124.645,291.234 133.118 C 292.492 137.518,292.424 276.929,291.162 281.058 C 288.934 288.346,284.160 293.536,276.777 296.697 L 274.200 297.800 200.800 297.800 L 127.400 297.800 124.400 296.491 C 116.912 293.225,111.692 287.208,110.188 280.108 C 109.290 275.871,109.320 138.124,110.219 133.768 C 111.755 126.332,117.341 120.055,125.219 116.911 C 128.061 115.777,268.305 115.317,274.174 116.422 \",\n  stroke: \"none\",\n  fill: \"#000000\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgUnchecked = function SvgUnchecked(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    width: 400,\n    height: 400,\n    viewBox: \"0, 0, 400,400\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgUnchecked, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/unchecked.42e718d1.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\r\nimport { ReactComponent as Checked} from './checked.svg'\r\nimport { ReactComponent as Unchecked} from './unchecked.svg'\r\n\r\nconst Checkbox = ({ selectedOption, option} ) => {\r\n    if(selectedOption === option) {\r\n        return <Checked style={{width: '2.5rem', height: '2.5rem'}}/>\r\n    }\r\n    else {\r\n        return <Unchecked style={{width: '2.5rem', height: '2.5rem'}}/>\r\n    }\r\n}\r\n\r\nexport default Checkbox\r\n","import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport Checkbox from './Checkbox'\r\nimport '../styles/Poll.css'\r\n\r\nclass Poll extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { selectedOption: '', selectedIndex: null, redirect: false }\r\n    }\r\n\r\n    updateValue = (event) => {\r\n        this.setState({\r\n            selectedOption: event.target.value,\r\n            selectedIndex: event.target.id\r\n        })\r\n    }\r\n\r\n    saveAnswer = (event) => {\r\n        event.preventDefault()\r\n        if(this.state.selectedIndex === null) {\r\n            alert(\"Please pick an answer\")\r\n        } else {\r\n            this.props.onAnswer(this.props.poll, this.state.selectedIndex)\r\n            this.setState({ redirect: true })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const poll = this.props.poll\r\n        if(poll === undefined){ return null } // allows page reload when user is on poll page\r\n        if(this.state.redirect) return <Redirect to={`/polls/${poll.id}/r`} />;\r\n        else return(\r\n            <div className=\"poll\">\r\n                <form id=\"voteform\" method=\"POST\" action={`/api/polls/${poll.id}`} onSubmit={this.saveAnswer}>\r\n                    <div id=\"poll-table\">\r\n                        <h2 id=\"poll-header\">{poll.question}</h2>\r\n                        <table className=\"poll-table\">\r\n                            <tbody>\r\n                                {poll.options.map((option, index) =>\r\n                                <tr key={index}>\r\n                                    <td>\r\n                                        {option}\r\n                                    </td>\r\n                                    <td>\r\n                                        <label id=\"checkbox\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=\"choice-button\"\r\n                                                value={option}\r\n                                                id={index}\r\n                                                checked={this.state.selectedOption === option}\r\n                                                onChange={this.updateValue}\r\n                                            />\r\n                                            <Checkbox selectedOption={this.state.selectedOption} option={option} />\r\n                                        </label>\r\n                                    </td>\r\n                                </tr>)\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <br></br>\r\n                    <div id=\"poll-button-container\">\r\n                        <button id=\"answer-button\" type=\"submit\"><strong>Answer!</strong></button>\r\n                        <Link to={`/polls/${poll.id}/r`}><button id=\"result-button\">Results</button></Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Poll\r\n","import React from 'react'\r\nimport '../styles/ResultBar.css'\r\n\r\nconst ResultBar = ({ percentage }) => {\r\n    return(\r\n        <div className=\"result-bar\">\r\n            <Filler percentage={percentage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Filler = ({ percentage }) => {\r\n    return(\r\n        <div className=\"filler\" style={{ width: `${percentage}%`}} />\r\n    )\r\n}\r\n\r\nexport default ResultBar\r\n","import React from 'react'\r\nimport ResultBar from './ResultBar'\r\nimport '../styles/PollResults.css'\r\n\r\nconst PollResults = ({ poll }) => {\r\n    if(poll ===  undefined){        // allows page reload\r\n        return null\r\n    }\r\n\r\n    const calcPercentage = (count) => {\r\n        if(count === 0 || count === undefined){\r\n            return 0\r\n        } else {\r\n            return (count / poll.answerCount.reduce((pv, cv) => pv + cv, 0))*100\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"poll-results\">\r\n            <div id=\"results-table\">\r\n                <h2 id=\"results-header\">{poll.question}</h2>\r\n                <table id=\"results\">\r\n                    <tbody>\r\n                    {poll.options.map((option, index) =>\r\n                    <tr key={index}>\r\n                        <td id=\"result\">\r\n                            <div id=\"answer-info\">\r\n                                <strong id=\"info-option\">{option}</strong><p>{`${poll.answerCount[index]} votes`}</p>\r\n                            </div>\r\n                            <ResultBar percentage={calcPercentage(poll.answerCount[index])} />\r\n                        </td>\r\n                        <td id=\"percentage\">\r\n                            {`${Math.round(calcPercentage(poll.answerCount[index]))}%`}</td>  \r\n                    </tr>)\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PollResults\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Route, Switch, Redirect, useRouteMatch } from 'react-router-dom';\r\nimport pollService from './services/polls'\r\nimport Main from './containers/Main'\r\nimport Header from './components/Header'\r\nimport PollDirectory from './components/PollDirectory'\r\nimport Poll from './components/Poll'\r\nimport PollResults from './components/PollResults'\r\n\r\nconst App = () => {\r\n    const [polls, setPolls] = useState([])\r\n\r\n    useEffect(() => {\r\n        pollService\r\n        .getAll()\r\n        .then(response => {\r\n            setPolls(response.data)\r\n        }) \r\n    }, [])\r\n\r\n    const updatePolls = (pollObject) => {\r\n        setPolls(polls.concat(pollObject))\r\n    }\r\n\r\n    const removePoll = (event) => {\r\n        let id = JSON.stringify([event.target.id])\r\n        id = id.substring(2, id.length-2)\r\n\r\n        if(window.confirm('Are you sure you want to delete this poll?')){\r\n            pollService\r\n                .remove(id)\r\n                .then(response => {\r\n                    setPolls(polls.filter(poll => poll.id !== id))\r\n                })\r\n        }\r\n    }\r\n\r\n    const incrementCount = (poll, index) => {\r\n        let currentCount = poll.answerCount\r\n        currentCount[Number(index)] += 1\r\n        const newCount = { ...poll, answerCount: currentCount }\r\n\r\n        pollService\r\n            .update(newCount, poll.id)\r\n            .then(response => {\r\n                    setPolls(polls.map(p => p !== poll ? p : newCount))\r\n        })\r\n    }\r\n\r\n    const match = useRouteMatch('/polls/:id')\r\n    let poll = match\r\n        ? polls.find(poll => poll.id === match.params.id)\r\n        : null\r\n\r\n    return(\r\n        <div className=\"app-background\">\r\n        <Header />\r\n            <Switch>\r\n                <Route path=\"/polls/:id/r\"><PollResults poll={poll} /></Route>\r\n                <Route path=\"/polls/:id\"><Poll poll={poll} onAnswer={incrementCount}/></Route>\r\n                <Route path=\"/polls\"><PollDirectory polls={polls} onDelete={removePoll}/></Route>\r\n                <Route path=\"/\"><Main polls={polls} onSubmit={updatePolls}/> </Route>\r\n                <Route render={() => <Redirect to=\"/\" />} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from  'react-router-dom'\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}