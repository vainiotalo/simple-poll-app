{"version":3,"sources":["services/polls.js","components/PollForm.js","components/PollMaker.js","containers/Main.js","components/Header.js","components/PollDirectory.js","components/Poll.js","components/ResultBar.js","components/PollResults.js","App.js","index.js"],"names":["axios","get","newObject","post","newValue","id","put","delete","PollForm","handleSubmit","handleChange","handleArray","inputObject","onSubmit","className","name","value","question","onChange","placeholder","Array","from","options","map","option","index","key","e","type","PollMaker","props","addQuestion","event","preventDefault","optionsFiltered","state","filter","counterInit","optionsCheck","Boolean","length","Set","pollObject","answerCount","alert","window","confirm","pollService","then","response","data","setState","handleQuestion","target","handleOptions","array","updateField","update","$set","$push","this","Component","Main","Header","to","onClick","PollDirectory","polls","onDelete","class","poll","Poll","updateValue","selectedOption","selectedIndex","saveAnswer","onAnswer","redirect","undefined","method","action","checked","Filler","percentage","style","width","ResultBar","PollResults","calcPercentage","count","reduce","pv","cv","Math","round","App","useState","setPolls","useEffect","match","useRouteMatch","find","params","path","currentCount","Number","newCount","p","JSON","stringify","substring","concat","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.48f6d847.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/polls'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (newValue, id) => {\r\n  return axios.put(`${baseUrl}/${id}`, newValue)\r\n}\r\n\r\nconst remove = id => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\nimport '../styles/PollForm.css'\r\n\r\nconst PollForm = ({ handleSubmit, handleChange, handleArray, inputObject }) => {\r\n    \r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Poll\" id=\"pollform\">\r\n                <input name=\"question\" id=\"input-field\" value={inputObject.question}\r\n                            onChange={handleChange} placeholder=\"Enter your question\"/>\r\n                <br /><br /><br /><br />\r\n                {\r\n                    Array.from(inputObject.options).map((option, index) => {\r\n                        return(\r\n                            <div key={index}>\r\n                                <input name=\"options\" id=\"input-field\" value={option} placeholder={`Answer option ${index+1}`}\r\n                                                                onChange={(e) => handleArray(e, index)}/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <br /><br />\r\n                <button type=\"submit\" id=\"form-button\">Create Poll</button>\r\n                <br /><br />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PollForm\r\n","import React, { Component } from 'react';\r\nimport update from 'immutability-helper';\r\nimport PollForm from './PollForm'\r\nimport pollService from '../services/polls'\r\n\r\nclass PollMaker extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            question: '',\r\n            options: ['','']\r\n        }\r\n    }\r\n\r\n    addQuestion = (event) => {\r\n        event.preventDefault()\r\n        const optionsFiltered = this.state.options.filter(option => option !== '')\r\n        const counterInit = optionsFiltered.map(option => option = 0)\r\n        const optionsCheck = Boolean(optionsFiltered.length < 2                                       // Check minimum amount of options\r\n                                    || [...new Set(optionsFiltered)].length < optionsFiltered.length) // Check for duplicates\r\n        const resetState = () => {\r\n            this.setState({\r\n                question: '',\r\n                options: ['','']\r\n            })\r\n        }\r\n        const pollObject = {\r\n            question: this.state.question,\r\n            options: optionsFiltered,\r\n            answerCount: counterInit\r\n        }\r\n        \r\n        switch(this.state.question){\r\n            case '':\r\n                alert(\"Please enter a question\")\r\n                if(optionsCheck){\r\n                    alert(\"Please enter at least two unique answer options\")\r\n                }\r\n                break;\r\n            default:\r\n                if(optionsCheck){\r\n                    alert(\"Please enter at least two unique answer options\")\r\n                } else { \r\n                    if(window.confirm(\"Save this poll?\")){\r\n                        pollService\r\n                            .create(pollObject)\r\n                            .then(response => {\r\n                                this.props.onSubmit(response.data)\r\n                                resetState()\r\n                            })  \r\n                    }   \r\n                }\r\n        }\r\n    }\r\n\r\n    handleQuestion = (event) => {\r\n        this.setState({ question: event.target.value })\r\n    }\r\n\r\n    handleOptions = (event, index) => {\r\n        const updateField  = (array) => {\r\n            return update(array, {[index]: {$set: event.target.value}})\r\n        }\r\n        const newField  = (array) => {\r\n            return update(array, {$push: ['']})\r\n        }\r\n\r\n        this.setState({\r\n            options: updateField(this.state.options)\r\n        })\r\n        if(index === this.state.options.length - 1 && index <= 28){     // Max amount of answer options is set to 30\r\n            this.setState({\r\n                options: updateField(newField(this.state.options))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"poll-maker\">\r\n                <PollForm\r\n                handleSubmit={this.addQuestion}\r\n                handleChange={this.handleQuestion}\r\n                handleArray={this.handleOptions} \r\n                inputObject={this.state}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PollMaker;\r\n","import React, { Component } from 'react'\r\nimport PollMaker from '../components/PollMaker'\r\nimport '../styles/Main.css'\r\n\r\nclass Main extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <div id=\"pollmaker-background\">\r\n                    <div id=\"pollmaker\">\r\n                        <PollMaker onSubmit={this.props.onSubmit}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/Header.css'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div className=\"Header\">\r\n            <div id=\"header\">\r\n                <div id=\"header-buttons\">\r\n                    <Link to={'/polls'}>\r\n                        <button id=\"header-button\" type=\"button\" onClick={void(0)}>Polls</button>\r\n                    </Link>\r\n                    <Link to={'/'}>\r\n                        <button id=\"header-button\" type=\"button\" onClick={void(0)}>Create A Poll</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/PollDirectory.css'\r\n\r\nconst PollDirectory = ({ polls, onDelete }) => {\r\n    if (polls.length > 0) {\r\n        return(\r\n        <div className=\"poll-directory\">\r\n            <div id=\"poll-dir-table\">\r\n                <h2 id=\"dir-header\">Open polls:</h2>\r\n                <table class=\"dir-table\">\r\n                    <tbody>\r\n                        {polls.map(poll =>\r\n                            <tr key={poll.id + ''}>\r\n                                <td><Link to={`/polls/${poll.id}`}>{poll.question}</Link></td>\r\n                                <td><button class=\"del-button\" onClick={onDelete} id={poll.id}>delete</button></td>\r\n                        </tr>)\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        )\r\n    } else return (\r\n    <div className=\"poll-directory\">\r\n        <div id=\"poll-dir-table\">\r\n            <h2 id=\"dir-header\">Open polls:</h2>\r\n            <p id=\"no-polls\">No polls yet!</p>\r\n        </div>\r\n    </div>)   \r\n}\r\n\r\nexport default PollDirectory\r\n","import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport '../styles/Poll.css'\r\n\r\nclass Poll extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { selectedOption: '', selectedIndex: 0, redirect: false }\r\n    }\r\n\r\n    updateValue = (event) => {\r\n        this.setState({\r\n            selectedOption: event.target.value,\r\n            selectedIndex: event.target.id\r\n        })\r\n    }\r\n\r\n    saveAnswer = (event) => {\r\n        event.preventDefault()\r\n        this.props.onAnswer(this.props.poll, this.state.selectedIndex)\r\n        this.setState({ redirect: true })\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        const poll = this.props.poll\r\n        if(poll === undefined){ return null } // allows page reload when user is on poll page\r\n        if(this.state.redirect) return <Redirect to={`/polls/${poll.id}/r`} />;\r\n        else return(\r\n            <div className=\"poll\">\r\n                <form id=\"voteform\" method=\"POST\" action={`/api/polls/${poll.id}`} onSubmit={this.saveAnswer}>\r\n                    <div id=\"poll-table\">\r\n                        <h2 id=\"poll-header\">{poll.question}</h2>\r\n                        <table class=\"poll-table\">\r\n                            <tbody>\r\n                                {poll.options.map((option, index) =>\r\n                                <tr key={index}>\r\n                                    <td>\r\n                                        {option}\r\n                                    </td>\r\n                                    <td>\r\n                                        <label>\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                class=\"choice-button\"\r\n                                                value={option}\r\n                                                id={index}\r\n                                                checked={this.state.selectedOption === option}\r\n                                                onChange={this.updateValue}\r\n                                            />\r\n                                        </label>\r\n                                    </td>\r\n                                </tr>)\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <br></br>\r\n                    <div id=\"poll-button-container\">\r\n                        <button class=\"answer-button\" type=\"submit\"><strong>Answer!</strong></button>\r\n                        <Link to={`/polls/${poll.id}/r`}><button class=\"result-button\">Results</button></Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Poll\r\n","import React from 'react'\r\nimport '../styles/ResultBar.css'\r\n\r\nconst ResultBar = ({ percentage }) => {\r\n    return(\r\n        <div className=\"result-bar\">\r\n            <Filler percentage={percentage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Filler = ({ percentage }) => {\r\n    return(\r\n        <div className=\"filler\" style={{ width: `${percentage}%`}} />\r\n    )\r\n}\r\n\r\nexport default ResultBar\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport ResultBar from './ResultBar'\r\nimport '../styles/PollResults.css'\r\n\r\nconst PollResults = ({ poll }) => {\r\n\r\n    if(poll ===  undefined){        // allows page reload\r\n        return null\r\n    }\r\n\r\n    const calcPercentage = (count) => {\r\n        if(count === 0 || count === undefined){\r\n            return 0\r\n        } else {\r\n            return (count / poll.answerCount.reduce((pv, cv) => pv + cv, 0))*100\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"poll-results\">\r\n            <div id=\"results-table\">\r\n                <h2 id=\"results-header\">{poll.question}</h2>\r\n                <table id=\"results\">\r\n                    <tbody>\r\n                    {poll.options.map((option, index) =>\r\n                    <tr key={index}>\r\n                        <td id=\"result\">\r\n                            <p class=\"split-para\"><strong>{option}</strong>\r\n                                <span>{/*`${poll.answerCount[index]} votes`*/}</span></p>\r\n                            <ResultBar percentage={calcPercentage(poll.answerCount[index])} />\r\n                        </td>\r\n                        <td id=\"percentage\">\r\n                            {`${Math.round(calcPercentage(poll.answerCount[index]))}%`}</td>  \r\n                    </tr>)\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PollResults\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Route, Switch, Redirect, useRouteMatch } from 'react-router-dom';\r\nimport pollService from './services/polls'\r\nimport Main from './containers/Main'\r\nimport Header from './components/Header'\r\nimport PollDirectory from './components/PollDirectory'\r\nimport Poll from './components/Poll'\r\nimport PollResults from './components/PollResults'\r\n\r\nconst App = () => {\r\n    const [polls, setPolls] = useState([])\r\n\r\n    useEffect(() => {\r\n        pollService\r\n        .getAll()\r\n        .then(response => {\r\n            setPolls(response.data)\r\n        }) \r\n    }, [])\r\n\r\n    const updatePolls = (pollObject) => {\r\n        setPolls(polls.concat(pollObject))\r\n    }\r\n\r\n    const removePoll = (event) => {\r\n        let id = JSON.stringify([event.target.id])\r\n        id = id.substring(2, id.length-2)\r\n\r\n        if(window.confirm('Are you sure you want to delete this poll?')){\r\n            pollService\r\n                .remove(id)\r\n                .then(response => {\r\n                    setPolls(polls.filter(poll => poll.id !== id))\r\n                })\r\n        }\r\n    }\r\n\r\n    const incrementCount = (poll, index) => {\r\n        let currentCount = poll.answerCount\r\n        currentCount[Number(index)] += 1\r\n        const newCount = { ...poll, answerCount: currentCount }\r\n\r\n        pollService\r\n            .update(newCount, poll.id)\r\n            .then(response => {\r\n                    setPolls(polls.map(p => p !== poll ? p : newCount))\r\n        })\r\n    }\r\n\r\n    const match = useRouteMatch('/polls/:id')\r\n    let poll = match\r\n        ? polls.find(poll => poll.id === match.params.id)\r\n        : null\r\n\r\n    return(\r\n        <>\r\n        <Header />\r\n            <Switch>\r\n                <Route path=\"/polls/:id/r\"><PollResults poll={poll} /></Route>\r\n                <Route path=\"/polls/:id\"><Poll poll={poll} onAnswer={incrementCount}/></Route>\r\n                <Route path=\"/polls\"><PollDirectory polls={polls} onDelete={removePoll}/></Route>\r\n                <Route path=\"/\"><Main polls={polls} onSubmit={updatePolls}/> </Route>\r\n                <Route render={() => <Redirect to=\"/\" />} />\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from  'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}