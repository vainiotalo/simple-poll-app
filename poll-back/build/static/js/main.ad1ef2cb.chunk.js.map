{"version":3,"sources":["services/polls.js","components/PollForm.js","components/PollMaker.js","components/PollDirectory.js","containers/Main.js","components/Poll.js","components/ResultBar.js","components/PollResults.js","App.js","index.js"],"names":["axios","get","newObject","post","newValue","id","put","delete","PollForm","handleSubmit","handleChange","handleArray","inputObject","smiley","role","aria-label","onSubmit","className","name","value","question","onChange","placeholder","Array","from","options","map","option","index","key","e","type","PollMaker","props","addQuestion","event","preventDefault","optionsFiltered","state","filter","counterInit","optionsCheck","Boolean","length","Set","pollObject","answerCount","alert","window","confirm","pollService","then","response","data","setState","handleQuestion","target","handleOptions","array","updateField","update","$set","$push","this","Component","PollDirectory","polls","onDelete","poll","to","onClick","Main","Poll","updateValue","selectedOption","selectedIndex","saveAnswer","onAnswer","redirect","undefined","method","action","checked","Filler","percentage","style","width","ResultBar","PollResults","calcPercentage","count","reduce","pv","cv","class","Math","round","App","useState","setPolls","useEffect","match","useRouteMatch","find","params","path","currentCount","Number","newCount","p","concat","JSON","stringify","substring","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ad1ef2cb.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/polls'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (newValue, id) => {\r\n  return axios.put(`${baseUrl}/${id}`, newValue)\r\n}\r\n\r\nconst remove = id => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\n\r\nconst PollForm = ({ handleSubmit, handleChange, handleArray, inputObject }) => {\r\n    const smiley = <span role=\"img\" aria-label=\"smiley\">&#128578;</span>\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Poll\">\r\n                <h1>SIMPLE P{smiley}LL APP</h1>\r\n                <h2>Enter your question:</h2>\r\n                <input name=\"question\" value={inputObject.question} onChange={handleChange} placeholder=\"Question\"/>\r\n                <h2>Enter answer options:</h2>\r\n                {\r\n                    Array.from(inputObject.options).map((option, index) => {\r\n                        return(\r\n                            <div key={index}>\r\n                                <input name=\"options\" value={option} placeholder={`Option ${index+1}`}\r\n                                                                onChange={(e) => handleArray(e, index)}/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <br></br>\r\n                <button type=\"submit\">Create Poll</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PollForm\r\n","import React, { Component } from 'react';\r\nimport update from 'immutability-helper';\r\nimport PollForm from './PollForm'\r\nimport pollService from '../services/polls'\r\n\r\nclass PollMaker extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            question: '',\r\n            options: ['','']\r\n        }\r\n    }\r\n\r\n    addQuestion = (event) => {\r\n        event.preventDefault()\r\n        const optionsFiltered = this.state.options.filter(option => option !== '')\r\n        const counterInit = optionsFiltered.map(option => option = 0)\r\n        const optionsCheck = Boolean(optionsFiltered.length < 2                                       // Check minimum amount of options\r\n                                    || [...new Set(optionsFiltered)].length < optionsFiltered.length) // Check for duplicates\r\n        const resetState = () => {\r\n            this.setState({\r\n                question: '',\r\n                options: ['','']\r\n            })\r\n        }\r\n        const pollObject = {\r\n            question: this.state.question,\r\n            options: optionsFiltered,\r\n            answerCount: counterInit\r\n        }\r\n        \r\n        switch(this.state.question){\r\n            case '':\r\n                alert(\"Please enter a question\")\r\n                if(optionsCheck){\r\n                    alert(\"Please enter at least two unique answer options\")\r\n                }\r\n                break;\r\n            default:\r\n                if(optionsCheck){\r\n                    alert(\"Please enter at least two unique answer options\")\r\n                } else { \r\n                    if(window.confirm(\"Save this poll?\")){\r\n                        pollService\r\n                            .create(pollObject)\r\n                            .then(response => {\r\n                                this.props.onSubmit(response.data)\r\n                                resetState()\r\n                            })  \r\n                    }   \r\n                }\r\n        }\r\n    }\r\n\r\n    handleQuestion = (event) => {\r\n        this.setState({ question: event.target.value })\r\n    }\r\n\r\n    handleOptions = (event, index) => {\r\n        const updateField  = (array) => {\r\n            return update(array, {[index]: {$set: event.target.value}})\r\n        }\r\n        const newField  = (array) => {\r\n            return update(array, {$push: ['']})\r\n        }\r\n\r\n        this.setState({\r\n            options: updateField(this.state.options)\r\n        })\r\n        if(index === this.state.options.length - 1 && index <= 28){     // Max amount of answer options is set to 30\r\n            this.setState({\r\n                options: updateField(newField(this.state.options))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"poll-maker\">\r\n                <PollForm handleSubmit={this.addQuestion} handleChange={this.handleQuestion}\r\n                                    handleArray={this.handleOptions} inputObject={this.state} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PollMaker;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './PollDirectory.css'\r\n\r\nconst PollDirectory = ({ polls, onDelete }) => {\r\n    return(\r\n        <div className=\"poll-directory\">\r\n            <h2>Open polls:</h2>\r\n            <table>\r\n                <tbody>\r\n                    {polls.map(poll =>\r\n                        <tr key={poll.id + ''}>\r\n                            <td><Link to={`/${poll.id}`}>{poll.question}</Link></td>\r\n                            <td><button onClick={onDelete} id={poll.id}>delete</button></td>\r\n                    </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PollDirectory\r\n","import React, { Component } from 'react'\r\nimport PollMaker from '../components/PollMaker'\r\nimport PollDirectory from '../components/PollDirectory'\r\nimport './Main.css'\r\n\r\nclass Main extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"main\" id=\"container\">\r\n                <div id=\"pollmaker\">\r\n                    <PollMaker onSubmit={this.props.onSubmit}/>\r\n                </div>\r\n                <div id=\"directory\">\r\n                    <PollDirectory polls={this.props.polls} onDelete={this.props.onDelete}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\n\r\nclass Poll extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { selectedOption: '', selectedIndex: 0, redirect: false }\r\n    }\r\n\r\n    updateValue = (event) => {\r\n        this.setState({\r\n            selectedOption: event.target.value,\r\n            selectedIndex: event.target.id\r\n        })\r\n    }\r\n\r\n    saveAnswer = (event) => {\r\n        event.preventDefault()\r\n        this.props.onAnswer(this.props.poll, this.state.selectedIndex)\r\n        this.setState({ redirect: true })\r\n    }\r\n\r\n    render(){\r\n        const poll = this.props.poll\r\n        const smiley = <span role=\"img\" aria-label=\"smiley\">&#128578;</span>\r\n        if(poll === undefined){ return null } // allows page reload when user is on poll page\r\n        if(this.state.redirect) return <Redirect to={`/${poll.id}/r`} />;\r\n        else return(\r\n            <div className=\"poll\">\r\n                <Link to=\"/\"><button>back</button></Link>\r\n                <form method=\"POST\" action={`/api/polls/${poll.id}`} onSubmit={this.saveAnswer}>\r\n                    <h2>{poll.question}{smiley}</h2>\r\n                    <table>\r\n                        <tbody>\r\n                            {poll.options.map((option, index) =>\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    <label>\r\n                                        <input type=\"radio\" value={option} id={index}\r\n                                                checked={this.state.selectedOption === option}\r\n                                                onChange={this.updateValue} />\r\n                                        {`  ${option}` }\r\n                                    </label>\r\n                                </td>\r\n                            </tr>)\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <br></br>\r\n                    <button type=\"submit\"><strong>Answer!</strong></button>\r\n                    <Link to={`/${poll.id}/r`}><button>Results</button></Link>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Poll\r\n","import React from 'react'\r\nimport './ResultBar.css'\r\n\r\nconst ResultBar = ({ percentage }) => {\r\n    return(\r\n        <div className=\"result-bar\">\r\n            <Filler percentage={percentage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Filler = ({ percentage }) => {\r\n    return(\r\n        <div className=\"filler\" style={{ width: `${percentage}%`}} />\r\n    )\r\n}\r\n\r\nexport default ResultBar\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport ResultBar from './ResultBar'\r\nimport './PollResults.css'\r\n\r\nconst PollResults = ({ poll }) => {\r\n    if(poll ===  undefined){        // allows page reload\r\n        return null\r\n    }\r\n\r\n    const calcPercentage = (count) => {\r\n        return (count / poll.answerCount.reduce((pv, cv) => pv + cv, 0))*100\r\n    }\r\n\r\n    const smiley = <span role=\"img\" aria-label=\"smiley\">&#128578;</span>\r\n\r\n    return(\r\n        <div className=\"poll-results\">\r\n            <Link to={`/${poll.id}/`}><button>back</button></Link>\r\n                <h2>{poll.question}{smiley}</h2>\r\n                <table id=\"results\">\r\n                    <tbody>\r\n                    {poll.options.map((option, index) =>\r\n                    <tr key={index}>\r\n                        <td id=\"result\">\r\n                            <p class=\"split-para\"><strong>{option}</strong>\r\n                                <span>{`${poll.answerCount[index]} votes`}</span></p>\r\n                            <ResultBar percentage={calcPercentage(poll.answerCount[index])} />\r\n                        </td>\r\n                        <td id=\"percentage\">\r\n                            {`${Math.round(calcPercentage(poll.answerCount[index]))}%`}</td>  \r\n                    </tr>)\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PollResults\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Route, Switch, Redirect, useRouteMatch } from 'react-router-dom';\r\nimport pollService from './services/polls'\r\nimport Main from './containers/Main'\r\nimport Poll from './components/Poll'\r\nimport PollResults from './components/PollResults'\r\n\r\nconst App = () => {\r\n    const [polls, setPolls] = useState([])\r\n\r\n    useEffect(() => {\r\n        pollService\r\n        .getAll()\r\n        .then(response => {\r\n            setPolls(response.data)\r\n        }) \r\n    }, [])\r\n\r\n    const updatePolls = (pollObject) => {\r\n        setPolls(polls.concat(pollObject))\r\n    }\r\n\r\n    const removePoll = (event) => {\r\n        let id = JSON.stringify([event.target.id])\r\n        id = id.substring(2, id.length-2)\r\n\r\n        if(window.confirm('Are you sure you want to delete this poll?')){\r\n            pollService\r\n                .remove(id)\r\n                .then(response => {\r\n                    setPolls(polls.filter(poll => poll.id !== id))\r\n                })\r\n        }\r\n    }\r\n\r\n    const incrementCount = (poll, index) => {\r\n        let currentCount = poll.answerCount\r\n        currentCount[Number(index)] += 1\r\n        const newCount = { ...poll, answerCount: currentCount }\r\n\r\n        pollService\r\n            .update(newCount, poll.id)\r\n            .then(response => {\r\n                    setPolls(polls.map(p => p !== poll ? p : newCount))\r\n        })\r\n    }\r\n\r\n    const match = useRouteMatch('/:id')\r\n    let poll = match\r\n        ? polls.find(poll => poll.id === match.params.id)\r\n        : null\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path=\"/:id/r\"><PollResults poll={poll} /></Route>\r\n            <Route path=\"/:id\"><Poll poll={poll} onAnswer={incrementCount}/></Route>\r\n            <Route path=\"/\"><Main polls={polls} onSubmit={updatePolls} onDelete={removePoll}/></Route>\r\n            <Route render={() => <Redirect to=\"/\" />} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from  'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}